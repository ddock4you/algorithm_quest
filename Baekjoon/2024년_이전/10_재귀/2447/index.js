// todo 제목: 별 찍기 - 10
// ! 문제: 재귀적인 패턴으로 별을 찍어 보자. N이 3의 거듭제곱(3, 9, 27, ...)이라고 할 때, 크기 N의 패턴은 N×N 정사각형 모양이다.
// ! 크기 3의 패턴은 가운데에 공백이 있고, 가운데를 제외한 모든 칸에 별이 하나씩 있는 패턴이다.
// ! ***
// ! * *
// ! ***
// ! N이 3보다 클 경우, 크기 N의 패턴은 공백으로 채워진 가운데의 (N/3)×(N/3) 정사각형을 크기 N/3의 패턴으로 둘러싼 형태이다. 예를 들어 크기 27의 패턴은 예제 출력 1과 같다.
// * 입력: 첫째 줄에 N이 주어진다. N은 3의 거듭제곱이다. 즉 어떤 정수 k에 대해 N=3k이며, 이때 1 ≤ k < 8이다.
// ? 출력: 첫째 줄부터 N번째 줄까지 별을 출력한다.

/*
 *예제 출력
 ***************************
 * ** ** ** ** ** ** ** ** *
 ***************************
 ***   ******   ******   ***
 * *   * ** *   * ** *   * *
 ***   ******   ******   ***
 ***************************
 * ** ** ** ** ** ** ** ** *
 ***************************
 *********         *********
 * ** ** *         * ** ** *
 *********         *********
 ***   ***         ***   ***
 * *   * *         * *   * *
 ***   ***         ***   ***
 *********         *********
 * ** ** *         * ** ** *
 *********         *********
 ***************************
 * ** ** ** ** ** ** ** ** *
 ***************************
 ***   ******   ******   ***
 * *   * ** *   * ** *   * *
 ***   ******   ******   ***
 ***************************
 * ** ** ** ** ** ** ** ** *
 ***************************
 */

const fs = require("fs");
const filePath = process.platform === "linux" ? "/dev/stdin" : "./input.txt";
const input = Number(fs
    .readFileSync(filePath)
    .toString());

const N = input;
const lines = []

printStars(N);
console.log(lines.join(""))

function printStars(N) {
    for (let i = 0; i < N; i += 1) {
        for (let j = 0; j < N; j += 1) {
            star(i, j, N)
        }
        lines.push("\n")
    }
}

function star(i, j, N) {
    if (i % 3 === 1 && j % 3 === 1) {
        // (1,1), (1,4), (1,7)...
        lines.push(" ")
    } else {
        if (N === 1) {
            lines.push("*")
        } else {
            // (3,3) = (1,1)이 되고,
            // (3,4) = (1,1)이 된다.
            // (9,9), (27,27)도 동일한 방식으로 재귀 호출된다.
            star(Math.floor(i / 3), Math.floor(j / 3), Math.floor(N / 3))
        }
    }
}